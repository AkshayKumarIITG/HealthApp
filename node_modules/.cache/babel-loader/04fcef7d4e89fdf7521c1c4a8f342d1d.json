{"ast":null,"code":"export const defaultMacroNutrients = {\n  calories: {\n    name: 'Calories',\n    raw: 0,\n    amount: 0,\n    unit: 'kcal'\n  },\n  proteins: {\n    name: 'Proteins',\n    raw: 0,\n    amount: 0,\n    unit: 'μg'\n  },\n  carbs: {\n    name: 'Carbs',\n    raw: 0,\n    amount: 0,\n    unit: 'μg'\n  },\n  fats: {\n    name: 'Fats',\n    raw: 0,\n    amount: 0,\n    unit: 'μg'\n  }\n};\nexport const calculateMacroNutrients = selectedFoods$ => {\n  const macroNutrients = JSON.parse(JSON.stringify(defaultMacroNutrients));\n  selectedFoods$.subscribe(selectedFood => {\n    selectedFood.amount = selectedFood.amount || 0;\n    macroNutrients.calories.raw += selectedFood.food.calories * selectedFood.amount;\n    macroNutrients.proteins.raw += selectedFood.food.proteins * selectedFood.amount;\n    macroNutrients.carbs.raw += selectedFood.food.carbohydrates * selectedFood.amount;\n    macroNutrients.fats.raw += selectedFood.food.fat * selectedFood.amount;\n  }, err => console.error(err), () => {\n    macroNutrients.calories = formatMacroNutrient(macroNutrients.calories, ['kcal']);\n    macroNutrients.proteins = formatMacroNutrient(macroNutrients.proteins, ['g', 'mg', 'μg']);\n    macroNutrients.carbs = formatMacroNutrient(macroNutrients.carbs, ['g', 'mg', 'μg']);\n    macroNutrients.fats = formatMacroNutrient(macroNutrients.fats, ['g', 'mg', 'μg']);\n  });\n  return macroNutrients;\n};\n\nconst formatMacroNutrient = (macroNutrient, units) => Object.assign(macroNutrient, unitize(macroNutrient.raw, units));\n\nexport const unitize = (amount, units) => {\n  let unit = units.pop();\n\n  while (amount >= 1000) {\n    if (units.length === 0) {\n      return {\n        amount: parseFloat(parseFloat(amount).toFixed(2)),\n        unit\n      };\n    }\n\n    amount /= 1000;\n    unit = units.pop();\n  }\n\n  return {\n    amount: parseFloat(parseFloat(amount).toFixed(2)),\n    unit\n  };\n};\n\nconst getMicroNutrientsDefaults = nutrients$ => {\n  const microNutrients = {};\n  nutrients$.subscribe(nutrient => {\n    if (!microNutrients[nutrient.name]) {\n      microNutrients[nutrient.name] = {\n        rda: nutrient.rda,\n        raw: 0,\n        amount: 0,\n        unit: 'μg',\n        percentage: 0\n      };\n    }\n  }, err => console.log(err), () => {});\n  return microNutrients;\n};\n\nconst percentage = (amount, total) => parseInt(amount * 100 / total, 10);\n\nexport const calculateMicroNutrients = (selectedFoods$, nutrients$) => {\n  const microNutrients = getMicroNutrientsDefaults(nutrients$);\n  selectedFoods$.subscribe(selectedFood => {\n    nutrients$.subscribe(nutrient => {\n      const foodNutrients = selectedFood.food.nutrients[nutrient.name];\n      microNutrients[nutrient.name].raw += (foodNutrients || 0) * selectedFood.amount;\n    }, err => console.error(err), () => {\n      nutrients$.subscribe(nutrient => {\n        microNutrients[nutrient.name].percentage = percentage(microNutrients[nutrient.name].raw, nutrient.rda);\n        microNutrients[nutrient.name].raw = parseInt(microNutrients[nutrient.name].raw, 10);\n        const r = unitize(microNutrients[nutrient.name].raw, ['g', 'mg', 'μg']);\n        microNutrients[nutrient.name].amount = r.amount;\n        microNutrients[nutrient.name].unit = r.unit;\n      });\n    });\n  });\n  return microNutrients;\n};","map":{"version":3,"sources":["/Users/crypto/OneDrive - Tesco/Documents/hacathon/food-nutrients/src/components/calculations.js"],"names":["defaultMacroNutrients","calories","name","raw","amount","unit","proteins","carbs","fats","calculateMacroNutrients","selectedFoods$","macroNutrients","JSON","parse","stringify","subscribe","selectedFood","food","carbohydrates","fat","err","console","error","formatMacroNutrient","macroNutrient","units","Object","assign","unitize","pop","length","parseFloat","toFixed","getMicroNutrientsDefaults","nutrients$","microNutrients","nutrient","rda","percentage","log","total","parseInt","calculateMicroNutrients","foodNutrients","nutrients","r"],"mappings":"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","sourcesContent":["export const defaultMacroNutrients = {\n  calories: {\n    name: 'Calories',\n    raw: 0,\n    amount: 0,\n    unit: 'kcal',\n  },\n  proteins: {\n    name: 'Proteins',\n    raw: 0,\n    amount: 0,\n    unit: 'μg',\n  },\n  carbs: {\n    name: 'Carbs',\n    raw: 0,\n    amount: 0,\n    unit: 'μg',\n  },\n  fats: {\n    name: 'Fats',\n    raw: 0,\n    amount: 0,\n    unit: 'μg',\n  },\n}\nexport const calculateMacroNutrients = selectedFoods$ => {\n  const macroNutrients = JSON.parse(JSON.stringify(defaultMacroNutrients))\n  selectedFoods$.subscribe(\n    selectedFood => {\n      selectedFood.amount = selectedFood.amount || 0\n      macroNutrients.calories.raw += selectedFood.food.calories * selectedFood.amount\n      macroNutrients.proteins.raw += selectedFood.food.proteins * selectedFood.amount\n      macroNutrients.carbs.raw += selectedFood.food.carbohydrates * selectedFood.amount\n      macroNutrients.fats.raw += selectedFood.food.fat * selectedFood.amount\n    },\n    err => console.error(err),\n    () => {\n      macroNutrients.calories = formatMacroNutrient(macroNutrients.calories, ['kcal'])\n      macroNutrients.proteins = formatMacroNutrient(macroNutrients.proteins, ['g', 'mg', 'μg'])\n      macroNutrients.carbs = formatMacroNutrient(macroNutrients.carbs, ['g', 'mg', 'μg'])\n      macroNutrients.fats = formatMacroNutrient(macroNutrients.fats, ['g', 'mg', 'μg'])\n    },\n  )\n\n  return macroNutrients\n}\nconst formatMacroNutrient = (macroNutrient, units) =>\n  Object.assign(macroNutrient, unitize(macroNutrient.raw, units))\n\nexport const unitize = (amount, units) => {\n  let unit = units.pop()\n  while (amount >= 1000) {\n    if (units.length === 0) {\n      return {\n        amount: parseFloat(parseFloat(amount).toFixed(2)),\n        unit,\n      }\n    }\n    amount /= 1000\n    unit = units.pop()\n  }\n  return {\n    amount: parseFloat(parseFloat(amount).toFixed(2)),\n    unit,\n  }\n}\nconst getMicroNutrientsDefaults = nutrients$ => {\n  const microNutrients = {}\n  nutrients$.subscribe(\n    nutrient => {\n      if (!microNutrients[nutrient.name]) {\n        microNutrients[nutrient.name] = {\n          rda: nutrient.rda,\n          raw: 0,\n          amount: 0,\n          unit: 'μg',\n          percentage: 0,\n        }\n      }\n    },\n    err => console.log(err),\n    () => {},\n  )\n  return microNutrients\n}\nconst percentage = (amount, total) => parseInt((amount * 100) / total, 10)\n\nexport const calculateMicroNutrients = (selectedFoods$, nutrients$) => {\n  const microNutrients = getMicroNutrientsDefaults(nutrients$)\n\n  selectedFoods$.subscribe(selectedFood => {\n    nutrients$.subscribe(\n      nutrient => {\n        const foodNutrients = selectedFood.food.nutrients[nutrient.name]\n        microNutrients[nutrient.name].raw += (foodNutrients || 0) * selectedFood.amount\n      },\n      err => console.error(err),\n      () => {\n        nutrients$.subscribe(nutrient => {\n          microNutrients[nutrient.name].percentage = percentage(\n            microNutrients[nutrient.name].raw,\n            nutrient.rda,\n          )\n          microNutrients[nutrient.name].raw = parseInt(microNutrients[nutrient.name].raw, 10)\n          const r = unitize(microNutrients[nutrient.name].raw, ['g', 'mg', 'μg'])\n          microNutrients[nutrient.name].amount = r.amount\n          microNutrients[nutrient.name].unit = r.unit\n        })\n      },\n    )\n  })\n\n  return microNutrients\n}\n"]},"metadata":{},"sourceType":"module"}