{"ast":null,"code":"var _jsxFileName = \"/Users/crypto/OneDrive - Tesco/Documents/hacathon/food-nutrients/src/components/micro-nutrients/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MicroNutrient from './../micro-nutrient';\nexport default class MicroNutrients extends Component {\n  render() {\n    const microNutrientsByType = this.props.definitions.reduce((group, current) => {\n      if (typeof group[current.type] === 'undefined') {\n        group[current.type] = [];\n      }\n\n      group[current.type].push(current);\n      return group;\n    }, {});\n    return React.createElement(\"div\", {\n      className: \"microNutrients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, Object.keys(microNutrientsByType).map(microNutrientsByTypeName => React.createElement(\"div\", {\n      key: microNutrientsByTypeName,\n      className: \"microNutrientType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"nutrientType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, microNutrientsByTypeName), microNutrientsByType[microNutrientsByTypeName].map(microNutrient => React.createElement(MicroNutrient, {\n      key: microNutrient.name,\n      microNutrient: microNutrient,\n      microNutrientData: this.props.microNutrients[microNutrient.name],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })))));\n  }\n\n}\nMicroNutrients.propTypes = {\n  definitions: PropTypes.any.isRequired,\n  microNutrients: PropTypes.any\n};\nMicroNutrients.defaultProps = {\n  microNutrients: {}\n};","map":{"version":3,"sources":["/Users/crypto/OneDrive - Tesco/Documents/hacathon/food-nutrients/src/components/micro-nutrients/index.js"],"names":["React","Component","PropTypes","MicroNutrient","MicroNutrients","render","microNutrientsByType","props","definitions","reduce","group","current","type","push","Object","keys","map","microNutrientsByTypeName","microNutrient","name","microNutrients","propTypes","any","isRequired","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,aAAP,MAA0B,qBAA1B;AAEA,eAAe,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AASpDI,EAAAA,MAAM,GAAG;AACP,UAAMC,oBAAoB,GAAG,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,MAAvB,CAA8B,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC7E,UAAI,OAAOD,KAAK,CAACC,OAAO,CAACC,IAAT,CAAZ,KAA+B,WAAnC,EAAgD;AAC9CF,QAAAA,KAAK,CAACC,OAAO,CAACC,IAAT,CAAL,GAAsB,EAAtB;AACD;;AACDF,MAAAA,KAAK,CAACC,OAAO,CAACC,IAAT,CAAL,CAAoBC,IAApB,CAAyBF,OAAzB;AACA,aAAOD,KAAP;AACD,KAN4B,EAM1B,EAN0B,CAA7B;AAOA,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGI,MAAM,CAACC,IAAP,CAAYT,oBAAZ,EAAkCU,GAAlC,CAAsCC,wBAAwB,IAC7D;AAAK,MAAA,GAAG,EAAEA,wBAAV;AAAoC,MAAA,SAAS,EAAC,mBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCA,wBAAhC,CADF,EAEGX,oBAAoB,CAACW,wBAAD,CAApB,CAA+CD,GAA/C,CAAmDE,aAAa,IAC/D,oBAAC,aAAD;AACE,MAAA,GAAG,EAAEA,aAAa,CAACC,IADrB;AAEE,MAAA,aAAa,EAAED,aAFjB;AAGE,MAAA,iBAAiB,EAAE,KAAKX,KAAL,CAAWa,cAAX,CAA0BF,aAAa,CAACC,IAAxC,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAFH,CADD,CADH,CADF;AAgBD;;AAjCmD;AAAjCf,c,CACZiB,S,GAAY;AACjBb,EAAAA,WAAW,EAAEN,SAAS,CAACoB,GAAV,CAAcC,UADV;AAEjBH,EAAAA,cAAc,EAAElB,SAAS,CAACoB;AAFT,C;AADAlB,c,CAKZoB,Y,GAAe;AACpBJ,EAAAA,cAAc,EAAE;AADI,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport MicroNutrient from './../micro-nutrient'\n\nexport default class MicroNutrients extends Component {\n  static propTypes = {\n    definitions: PropTypes.any.isRequired,\n    microNutrients: PropTypes.any,\n  }\n  static defaultProps = {\n    microNutrients: {},\n  }\n\n  render() {\n    const microNutrientsByType = this.props.definitions.reduce((group, current) => {\n      if (typeof group[current.type] === 'undefined') {\n        group[current.type] = []\n      }\n      group[current.type].push(current)\n      return group\n    }, {})\n    return (\n      <div className=\"microNutrients\">\n        {Object.keys(microNutrientsByType).map(microNutrientsByTypeName => (\n          <div key={microNutrientsByTypeName} className=\"microNutrientType\">\n            <span className=\"nutrientType\">{microNutrientsByTypeName}</span>\n            {microNutrientsByType[microNutrientsByTypeName].map(microNutrient => (\n              <MicroNutrient\n                key={microNutrient.name}\n                microNutrient={microNutrient}\n                microNutrientData={this.props.microNutrients[microNutrient.name]}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}