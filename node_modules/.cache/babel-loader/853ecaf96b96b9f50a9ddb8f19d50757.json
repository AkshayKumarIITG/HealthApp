{"ast":null,"code":"var _jsxFileName = \"/Users/crypto/OneDrive - Tesco/Documents/hacathon/food-nutrients/src/components/foods/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport FoodSelector from './../food-selector';\nimport SelectedFood from './../selected-food';\nimport { Icon } from 'antd';\nimport update from 'immutability-helper';\nimport foods from './../../data/foods.json';\nimport { from } from 'rxjs';\nexport default class Foods extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedFoods: [],\n      foodsForSelection: []\n    };\n\n    this.onFoodSelect = selectedFoodName => {\n      this.setState({\n        selectedFoods: [...this.state.selectedFoods, {\n          food: foods.find(f => f.name === selectedFoodName),\n          amount: foods.find(f => f.name === selectedFoodName).serving || 100\n        }]\n      }, () => {\n        this.props.updateNutrients(from(this.state.selectedFoods));\n        this.updateFoodSelector();\n      });\n    };\n\n    this.onFoodRemove = removedFood => {\n      const removedFoodIndex = this.findFoodIndex(removedFood.food.name);\n      const updatedSelectedFoods = update(this.state.selectedFoods, {\n        $splice: [[removedFoodIndex, 1]]\n      });\n      this.setState({\n        selectedFoods: updatedSelectedFoods\n      }, () => {\n        this.props.updateNutrients(from(this.state.selectedFoods));\n        this.updateFoodSelector();\n      });\n    };\n\n    this.findFoodIndex = foodName => this.state.selectedFoods.findIndex(f => f.food.name === foodName);\n\n    this.onFoodAmountChange = updatedSelectedFood => {\n      const updatedFoodIndex = this.findFoodIndex(updatedSelectedFood.food.name);\n      const updatedSelectedFoods = update(this.state.selectedFoods, {\n        $splice: [[updatedFoodIndex, 1, updatedSelectedFood]]\n      });\n      this.setState({\n        selectedFoods: updatedSelectedFoods\n      }, () => {\n        this.props.updateNutrients(from(this.state.selectedFoods));\n      });\n    };\n\n    this.updateFoodSelector = () => {\n      const allPossibleFoods = foods.map(food => food.name);\n      const allSelectedFoods = this.state.selectedFoods.map(sf => sf.food.name);\n      this.setState({\n        foodsForSelection: allPossibleFoods.filter(f => !allSelectedFoods.includes(f))\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      foodsForSelection: foods.map(food => food.name)\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(FoodSelector, {\n      className: \"foodSelector\",\n      foods: this.state.foodsForSelection,\n      onChange: this.onFoodSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), this.state.selectedFoods.length === 0 && React.createElement(\"div\", {\n      className: \"addFoods\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: \"animate-flicker\",\n      type: \"arrow-up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), this.state.selectedFoods.length > 0 && React.createElement(\"h3\", {\n      className: \"selectedFoodsLabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \" Selected foods \"), this.state.selectedFoods.map(selectedFood => React.createElement(SelectedFood, {\n      key: selectedFood.food.name,\n      selectedFood: selectedFood,\n      onChange: this.onFoodAmountChange,\n      onRemove: this.onFoodRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })));\n  }\n\n}\nFoods.propTypes = {\n  updateNutrients: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/crypto/OneDrive - Tesco/Documents/hacathon/food-nutrients/src/components/foods/index.js"],"names":["React","Component","PropTypes","FoodSelector","SelectedFood","Icon","update","foods","from","Foods","state","selectedFoods","foodsForSelection","onFoodSelect","selectedFoodName","setState","food","find","f","name","amount","serving","props","updateNutrients","updateFoodSelector","onFoodRemove","removedFood","removedFoodIndex","findFoodIndex","updatedSelectedFoods","$splice","foodName","findIndex","onFoodAmountChange","updatedSelectedFood","updatedFoodIndex","allPossibleFoods","map","allSelectedFoods","sf","filter","includes","componentDidMount","render","length","selectedFood","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport FoodSelector from './../food-selector'\nimport SelectedFood from './../selected-food'\nimport { Icon } from 'antd'\nimport update from 'immutability-helper'\nimport foods from './../../data/foods.json'\nimport { from } from 'rxjs'\n\nexport default class Foods extends Component {\n  static propTypes = {\n    updateNutrients: PropTypes.func.isRequired,\n  }\n  state = {\n    selectedFoods: [],\n    foodsForSelection: [],\n  }\n  onFoodSelect = selectedFoodName => {\n    this.setState(\n      {\n        selectedFoods: [\n          ...this.state.selectedFoods,\n          {\n            food: foods.find(f => f.name === selectedFoodName),\n            amount: foods.find(f => f.name === selectedFoodName).serving || 100,\n          },\n        ],\n      },\n      () => {\n        this.props.updateNutrients(from(this.state.selectedFoods))\n        this.updateFoodSelector()\n      },\n    )\n  }\n\n  onFoodRemove = removedFood => {\n    const removedFoodIndex = this.findFoodIndex(removedFood.food.name)\n    const updatedSelectedFoods = update(this.state.selectedFoods, {\n      $splice: [[removedFoodIndex, 1]],\n    })\n    this.setState(\n      {\n        selectedFoods: updatedSelectedFoods,\n      },\n      () => {\n        this.props.updateNutrients(from(this.state.selectedFoods))\n        this.updateFoodSelector()\n      },\n    )\n  }\n  findFoodIndex = foodName => this.state.selectedFoods.findIndex(f => f.food.name === foodName)\n  onFoodAmountChange = updatedSelectedFood => {\n    const updatedFoodIndex = this.findFoodIndex(updatedSelectedFood.food.name)\n    const updatedSelectedFoods = update(this.state.selectedFoods, {\n      $splice: [[updatedFoodIndex, 1, updatedSelectedFood]],\n    })\n    this.setState({ selectedFoods: updatedSelectedFoods }, () => {\n      this.props.updateNutrients(from(this.state.selectedFoods))\n    })\n  }\n  updateFoodSelector = () => {\n    const allPossibleFoods = foods.map(food => food.name)\n    const allSelectedFoods = this.state.selectedFoods.map(sf => sf.food.name)\n    this.setState({\n      foodsForSelection: allPossibleFoods.filter(f => !allSelectedFoods.includes(f)),\n    })\n  }\n  componentDidMount() {\n    this.setState({ foodsForSelection: foods.map(food => food.name) })\n  }\n  render() {\n    return (\n      <div>\n        <FoodSelector\n          className=\"foodSelector\"\n          foods={this.state.foodsForSelection}\n          onChange={this.onFoodSelect}\n        />\n        {this.state.selectedFoods.length === 0 && (\n          <div className=\"addFoods\">\n            <Icon className=\"animate-flicker\" type=\"arrow-up\" />\n          </div>\n        )}\n        {this.state.selectedFoods.length > 0 && (\n          <h3 className=\"selectedFoodsLabel\"> Selected foods </h3>\n        )}\n        {this.state.selectedFoods.map(selectedFood => (\n          <SelectedFood\n            key={selectedFood.food.name}\n            selectedFood={selectedFood}\n            onChange={this.onFoodAmountChange}\n            onRemove={this.onFoodRemove}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}